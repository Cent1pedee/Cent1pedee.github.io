<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Todoist目标清单列表</title>
      <link href="/posts/a8dff632.html"/>
      <url>/posts/a8dff632.html</url>
      
        <content type="html"><![CDATA[<p>边敲博客边想要做的内容吧，就往下面塞了</p><ul><li><input checked="" disabled="" type="checkbox"> 搭建博客 2023&#x2F;8&#x2F;1</li><li><input checked="" disabled="" type="checkbox"> github部署博客 2023&#x2F;8&#x2F;1</li><li><input checked="" disabled="" type="checkbox"> 博客主页配置 2023&#x2F;8&#x2F;5</li><li><input checked="" disabled="" type="checkbox"> vercel加速hexo访问 2023&#x2F;8&#x2F;10</li><li><input checked="" disabled="" type="checkbox"> 配置twikoo评论系统 2023&#x2F;8&#x2F;10</li><li><input checked="" disabled="" type="checkbox"> 博客主页 2023&#x2F;8&#x2F;17</li><li><input checked="" disabled="" type="checkbox"> 萌ICP备~~ 2023&#x2F;8&#x2F;17</li><li><input checked="" disabled="" type="checkbox"> 基于UptimeRobot接口制作Status检测 2023&#x2F;8&#x2F;17</li><li><input checked="" disabled="" type="checkbox"> Hexo后端Qexo部署 2023&#x2F;8&#x2F;20</li><li><input checked="" disabled="" type="checkbox"> 假装图床有登录页 2023&#x2F;8&#x2F;22</li><li><input checked="" disabled="" type="checkbox"> ChimeraGPT 2023&#x2F;8&#x2F;23</li><li><input disabled="" type="checkbox"> 不知道还有啥 先留个空 有空多加几个gpt吧</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 任务清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/posts/1c291ca3.html"/>
      <url>/posts/1c291ca3.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World! </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据可视化：Matplotlib常用操作(基础篇)</title>
      <link href="/posts/443e71ba.html"/>
      <url>/posts/443e71ba.html</url>
      
        <content type="html"><![CDATA[<p><strong><span class='p h1'>Matplotlib介绍</span></strong></p><ul><li>Matplotlib是一个Python 2D绘图库，它以多种硬拷贝格式和跨平台的交互式环境生成出版物质量的图形。 Matplotlib可用于Python脚本，Python和<a href="https://ipython.org/">IPython</a> Shell、<a href="http://jupyter.org/">Jupyter</a>笔记本，Web应用程序服务器和四个图形用户界面工具包。</li><li>Matplotlib 尝试使容易的事情变得更容易，使困难的事情变得可能。 您只需几行代码就可以生成图表、直方图、功率谱、条形图、误差图、散点图等。 更多的示例，请参见<a href="https://matplotlib.org.cn/tutorials/introductory/sample_plots.html">基础绘图例子</a>和<a href="https://matplotlib.org.cn/gallery/">示例陈列馆</a>。</li><li>为了简单绘图，该 <strong>pyplot</strong> 模块提供了类似于MATLAB的界面，尤其是与IPython结合使用时。 对于高级用户，您可以通过面向对象的界面或MATLAB用户熟悉的一组功能来完全控制线型，字体属性，轴属性等。</li></ul><p><strong><span class='p h1'>安装</span></strong></p><p>访问<a href="https://matplotlib.org.cn/users/installing.html">Matplotlib安装说明</a>。</p><p>关于Python Matplotlib的用法总结请参考博文：<a href="https://matplotlib.org.cn/intro/">https://matplotlib.org.cn/intro/</a></p><p>下面是部分例题以便更好的理解<strong>Matplotlib</strong></p><hr><h2 id="简单绘图题（Matplotlib）"><a href="#简单绘图题（Matplotlib）" class="headerlink" title="简单绘图题（Matplotlib）"></a>简单绘图题（Matplotlib）</h2><h3 id="绘制以下两个函数的图像"><a href="#绘制以下两个函数的图像" class="headerlink" title="绘制以下两个函数的图像"></a>绘制以下两个函数的图像</h3><h3 id="1、设定一个你喜欢的绘图风格；"><a href="#1、设定一个你喜欢的绘图风格；" class="headerlink" title="1、设定一个你喜欢的绘图风格；"></a>1、设定一个你喜欢的绘图风格；</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.style.use(<span class="string">&quot;seaborn-whitegrid&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、绘制折线图："><a href="#2、绘制折线图：" class="headerlink" title="2、绘制折线图："></a>2、绘制折线图：</h3><ul><li><p>根据下面的X和Y按要求绘图</p></li><li><p>x &#x3D; np.linspace(0, 2*np.pi, 100)</p></li><li><p>函数1：y1 &#x3D; 1 &#x2F; 1 + np.exp(-x)</p></li><li><p>函数2：y2 &#x3D; (np.exp(x) - np.exp(-x)) &#x2F; (np.exp(x) + np.exp(-x))</p></li><li><p>对线条的颜色、形状、粗细进行设置；</p></li><li><p>对数据点的形状、大小和颜色进行设置；</p></li><li><p>调整坐标轴的范围，调整坐标轴刻度的大小；</p></li><li><p>增加x轴、y轴的标签以及图像标题；</p></li><li><p>增加图例、添加箭头和文字；</p></li><li><p>将最终绘制好的图像保存到本地文件夹。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认原始图形</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">y1 = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">y2 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x249eac5e280&gt;]</code></pre><p><img src="/img/python-matplotlib/output_6_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(1) 对线条的颜色、形状、粗细进行设置；</span></span><br><span class="line">plt.plot(x, y1,<span class="string">&#x27;r--&#x27;</span>,linewidth=<span class="number">10</span>)</span><br><span class="line">plt.plot(x, y2,<span class="string">&#x27;g-&#x27;</span>,linewidth=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x249eacbaee0&gt;]</code></pre><p><img src="/img/python-matplotlib/output_7_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(2)对数据点的形状、大小和颜色进行设置；</span></span><br><span class="line">plt.plot(x, y1,<span class="string">&#x27;r*&#x27;</span>,markersize=<span class="number">5</span>)</span><br><span class="line">plt.plot(x, y2,<span class="string">&#x27;go&#x27;</span>,markersize=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x249eaf7ebe0&gt;]</code></pre><p><img src="/img/python-matplotlib/output_8_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对线条的颜色、形状、粗细进行设置；</span></span><br><span class="line"><span class="comment">#对数据点的形状、大小和颜色进行设置；</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1,<span class="string">&#x27;r*--&#x27;</span>,markersize=<span class="number">5</span>,linewidth=<span class="number">10</span>)</span><br><span class="line">plt.plot(x, y2,<span class="string">&#x27;go-&#x27;</span>,markersize=<span class="number">5</span>,linewidth=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x249ead2d130&gt;]</code></pre><p><img src="/img/python-matplotlib/output_9_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x))</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)), linewidth=<span class="number">10</span>, c=<span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x24a8b56ba60&gt;]</code></pre><p><img src="/img/python-matplotlib/output_10_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x), <span class="string">&#x27;r+:&#x27;</span>, markersize=<span class="number">5</span>)</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)), <span class="string">&#x27;g*--&#x27;</span>, markersize=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x24a8b66c160&gt;]</code></pre><p><img src="/img/python-matplotlib/output_11_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调整坐标轴的范围</span></span><br><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x))</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)))</span><br><span class="line">plt.xlim(-<span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>(0.0, 3.0)</code></pre><p><img src="/img/python-matplotlib/output_12_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调整坐标轴刻度的大小；</span></span><br><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x))</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)))</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">7</span>, step=<span class="number">0.5</span>), fontsize=<span class="number">10</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">2</span>, step=<span class="number">0.5</span>), fontsize=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.YTick at 0x24a8b70d7c0&gt;,  &lt;matplotlib.axis.YTick at 0x24a8b70d3a0&gt;,  &lt;matplotlib.axis.YTick at 0x24a8b709220&gt;,  &lt;matplotlib.axis.YTick at 0x24a8b746fd0&gt;], [Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;), Text(0, 0, &#39;&#39;)])</code></pre><p><img src="/img/python-matplotlib/output_13_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x))</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)))</span><br><span class="line">plt.title(<span class="string">&quot;1 / 1 + e^x&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;(e^x - e^(-x))/ (e^x + e^(-x))&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>, fontsize=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0, 0.5, &#39;y&#39;)</code></pre><p><img src="/img/python-matplotlib/output_14_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x), label=<span class="string">&quot;1 / 1 + e^x&quot;</span>)</span><br><span class="line">plt.plot(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)), label=<span class="string">&quot;(e^x - e^(-x))/ (e^x + e^(-x))&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;1 / 1 + e^x&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;(e^x - e^(-x))/ (e^x + e^(-x))&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>, frameon=<span class="literal">True</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.annotate(<span class="string">&#x27;zero point&#x27;</span>, xy=(<span class="number">5</span>, <span class="number">1</span>), xytext=(<span class="number">3</span>, <span class="number">0.75</span>), fontsize=<span class="number">15</span>,</span><br><span class="line">             arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&#x27;-&gt;&#x27;</span>, facecolor=<span class="string">&#x27;black&#x27;</span>),</span><br><span class="line">             )</span><br><span class="line">plt.savefig(<span class="string">&#x27;my_figure.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/python-matplotlib/output_15_0.png" alt="png"></p><h3 id="3、绘制散点图："><a href="#3、绘制散点图：" class="headerlink" title="3、绘制散点图："></a>3、绘制散点图：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(x, <span class="number">1</span> / <span class="number">1</span> + np.exp(-x), c=(<span class="number">1</span> / <span class="number">1</span> + np.exp(-x)), s=<span class="number">100</span> * np.random.rand(<span class="number">100</span>), cmap=<span class="string">&quot;viridis&quot;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.scatter(x, (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x)), c=((np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))), s= <span class="number">50</span> * np.random.rand(<span class="number">100</span>), cmap=<span class="string">&quot;viridis&quot;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.colorbar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.colorbar.Colorbar at 0x24a8b8c7cd0&gt;</code></pre><p><img src="/img/python-matplotlib/output_17_1.png" alt="png"></p><ul><li>按y值的大小进行颜色配置，选择一个你喜欢的颜色映射；</li><li>生成一个随机序列，点的大小依赖于对应位置的随机序列的值；</li><li>设置不同的透明度。</li></ul><h3 id="4、绘制柱形图："><a href="#4、绘制柱形图：" class="headerlink" title="4、绘制柱形图："></a>4、绘制柱形图：</h3><ul><li>利用函数1，生成一系列x, y，并绘制柱形图；</li><li>利用函数2，生成一系列x, y，并绘制横向柱形图；</li><li>利用函数1、2，生成一系列x, y，并绘制累加柱形图和并列柱形图；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">y = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">plt.bar(x, y, align=<span class="string">&#x27;center&#x27;</span>, width=<span class="number">0.5</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, labelsize=<span class="number">13</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">11</span>, step=<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.XTick at 0x24a8b92d1c0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b92d190&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b926d30&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b9587c0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b958cd0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b965220&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b965730&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b965c40&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b96b190&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b965970&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b958a00&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b96b6a0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b96bbb0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b972100&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b972610&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b972b20&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b975070&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b975580&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b9726a0&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b96b730&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b975880&gt;,  &lt;matplotlib.axis.XTick at 0x24a8b975c40&gt;], [Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;),  Text(0, 0, &#39;&#39;)])</code></pre><p><img src="/img/python-matplotlib/output_21_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">y = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line">plt.barh(x, y, align=<span class="string">&#x27;center&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;BarContainer object of 5 artists&gt;</code></pre><p><img src="/img/python-matplotlib/output_22_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">y1 = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">y2 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line">plt.bar(x, y1, align=<span class="string">&#x27;center&#x27;</span>, width=<span class="number">0.5</span>)</span><br><span class="line">plt.bar(x + <span class="number">0.5</span>, y2, align=<span class="string">&#x27;center&#x27;</span>, width=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;BarContainer object of 5 artists&gt;</code></pre><p><img src="/img/python-matplotlib/output_23_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">y1 = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">y2 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line">plt.bar(x, y1, align=<span class="string">&#x27;center&#x27;</span>, width=<span class="number">0.5</span>)</span><br><span class="line">plt.bar(x, y2, bottom=y1, align=<span class="string">&#x27;center&#x27;</span>, width=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;BarContainer object of 5 artists&gt;</code></pre><p><img src="/img/python-matplotlib/output_24_1.png" alt="png"></p><h3 id="5、多子图："><a href="#5、多子图：" class="headerlink" title="5、多子图："></a>5、多子图：</h3><ul><li>在函数1、2的基础上，增加正弦函数和余弦函数，绘制2*2的多子图。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">10000</span>)</span><br><span class="line">y1 = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">y2 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line">y3 = np.sin(x)</span><br><span class="line">y4 = np.cos(x)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">321</span>)</span><br><span class="line">plt.plot(x, y1)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">322</span>)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">323</span>)</span><br><span class="line">plt.plot(x, y3)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">324</span>)</span><br><span class="line">plt.plot(x, y4)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x24a8b7c7820&gt;]</code></pre><p><img src="/img/python-matplotlib/output_27_1.png" alt="png"></p><h3 id="6、直方图："><a href="#6、直方图：" class="headerlink" title="6、直方图："></a>6、直方图：</h3><ul><li>构造一个标准正态分布，绘制频次直方图、概率密度直方图、累计概率直方图。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mu, sigma = <span class="number">85</span>, <span class="number">10</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line">plt.hist(x, bins=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><pre><code>(array([  3.,   2.,   1.,   7.,   3.,   8.,   8.,  25.,  28.,  36.,  72.,         70., 122., 118., 165., 219., 300., 311., 397., 430., 516., 580.,        595., 627., 612., 661., 568., 535., 500., 455., 434., 371., 278.,        215., 196., 139., 101.,  86.,  58.,  48.,  41.,  18.,  14.,  11.,          8.,   6.,   1.,   0.,   0.,   1.]), array([ 46.8047152 ,  48.35161112,  49.89850705,  51.44540298,         52.9922989 ,  54.53919483,  56.08609076,  57.63298669,         59.17988261,  60.72677854,  62.27367447,  63.82057039,         65.36746632,  66.91436225,  68.46125818,  70.0081541 ,         71.55505003,  73.10194596,  74.64884188,  76.19573781,         77.74263374,  79.28952967,  80.83642559,  82.38332152,         83.93021745,  85.47711337,  87.0240093 ,  88.57090523,         90.11780116,  91.66469708,  93.21159301,  94.75848894,         96.30538486,  97.85228079,  99.39917672, 100.94607265,        102.49296857, 104.0398645 , 105.58676043, 107.13365635,        108.68055228, 110.22744821, 111.77434414, 113.32124006,        114.86813599, 116.41503192, 117.96192784, 119.50882377,        121.0557197 , 122.60261563, 124.14951155]), &lt;BarContainer object of 50 artists&gt;)</code></pre><p><img src="/img/python-matplotlib/output_30_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mu, sigma = <span class="number">85</span>, <span class="number">10</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line">plt.hist(x, bins=<span class="number">50</span>, density=<span class="literal">True</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.035</span>, <span class="string">r&#x27;$\mu=100,\ \sigma=15$&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(60, 0.035, &#39;$\\mu=100,\\ \\sigma=15$&#39;)</code></pre><p><img src="/img/python-matplotlib/output_31_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mu, sigma = <span class="number">85</span>, <span class="number">10</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line">plt.hist(x, <span class="number">50</span>, density=<span class="literal">True</span>, cumulative=<span class="literal">True</span>, color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.035</span>, <span class="string">r&#x27;$\mu=100,\ \sigma=15$&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(60, 0.035, &#39;$\\mu=100,\\ \\sigma=15$&#39;)</code></pre><p><img src="/img/python-matplotlib/output_32_1.png" alt="png"></p><h3 id="7、误差图："><a href="#7、误差图：" class="headerlink" title="7、误差图："></a>7、误差图：</h3><ul><li>利用函数 1，生成一系列x, y，随机生成一系列误差dy，绘制误差图。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">25</span>)</span><br><span class="line">y = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">dy = np.random.rand(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">plt.errorbar(x, y, dy, fmt=<span class="string">&#x27;+b&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;ErrorbarContainer object of 3 artists&gt;</code></pre><p><img src="/img/python-matplotlib/output_35_1.png" alt="png"></p><h2 id="简单绘图题（其他）"><a href="#简单绘图题（其他）" class="headerlink" title="简单绘图题（其他）"></a>简单绘图题（其他）</h2><h3 id="1、面向对象绘图"><a href="#1、面向对象绘图" class="headerlink" title="1、面向对象绘图"></a>1、面向对象绘图</h3><ul><li>利用函数 1 和函数2，绘制一个画中画。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">10000</span>)</span><br><span class="line">y1 = <span class="number">1</span> / <span class="number">1</span> + np.exp(-x)</span><br><span class="line">y2 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_axes([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line"></span><br><span class="line">ax1.plot(x, y1, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax2.plot(x, y2, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x24a8ceebd00&gt;]</code></pre><p><img src="/img/python-matplotlib/output_39_1.png" alt="png"></p><h3 id="2、三维图形绘制"><a href="#2、三维图形绘制" class="headerlink" title="2、三维图形绘制"></a>2、三维图形绘制</h3><ul><li>绘制一个薄圆柱体。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">1000</span>)</span><br><span class="line">X = np.sin(t)</span><br><span class="line">Y = np.cos(t)</span><br><span class="line">Z = np.arange(t.size)[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">ax = plt.axes(projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax.plot_surface(X, Y, Z, cmap=<span class="string">&quot;viridis&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x24a8dff2d30&gt;</code></pre><p><img src="/img/python-matplotlib/output_42_1.png" alt="png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件学习 </category>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据清洗：Numpy常用操作</title>
      <link href="/posts/2b53089b.html"/>
      <url>/posts/2b53089b.html</url>
      
        <content type="html"><![CDATA[<p><strong><span class='p h1'>我为什么要用NumPy?</span></strong></p><ul><li>对于同样的数值计算任务，使用NumPy要比直接编写Python代码便捷得多；</li><li>NumPy中的数组的存储效率和输入输出性能均远远优于Python中等价的基本数据结构，且其能够提升的性能是与数组中的元素成比例的；</li><li>NumPy的大部分代码都是用C语言写的，其底层算法在设计时就有着优异的性能，这使得NumPy比纯Python代码高效得多</li><li>当然，NumPy也有其不足之处，由于NumPy使用内存映射文件以达到最优的数据读写性能，而内存的大小限制了其对TB级大文件的处理；此外，NumPy数组的通用性不及Python提供的list容器。因此，在科学计算之外的领域，NumPy的优势也就不那么明显。</li></ul><p>关于Python Numpy矩阵的用法总结请参考博文：<a href="https://www.cnblogs.com/wj-1314/p/10244807.html">https://www.cnblogs.com/wj-1314/p/10244807.html</a></p><hr><h1 id="什么是NumPy-基础篇"><a href="#什么是NumPy-基础篇" class="headerlink" title="什么是NumPy?(基础篇)"></a>什么是NumPy?(基础篇)</h1><p>NumPy是一个功能强大的Python库，主要用于对多维数组执行计算。NumPy这个词来源于两个单词– <mark class="hl-label blue">Numerical</mark> 和<mark class="hl-label blue">Python</mark> 。NumPy提供了大量的库函数和操作，可以帮助程序员轻松地进行数值计算。这类数值计算广泛用于以下任务：</p><ul><li><p><strong>机器学习模型</strong>：在编写机器学习算法时，需要对矩阵进行各种数值计算。例如矩阵乘法、换位、加法等。NumPy提供了一个非常好的库，用于简单(在编写代码方面)和快速(在速度方面)计算。NumPy数组用于存储训练数据和机器学习模型的参数。</p></li><li><p><strong>图像处理和计算机图形学</strong>：计算机中的图像表示为多维数字数组。NumPy成为同样情况下最自然的选择。实际上，NumPy提供了一些优秀的库函数来快速处理图像。例如，镜像图像、按特定角度旋转图像等。</p></li><li><p><strong>数学任务</strong>：NumPy对于执行各种数学任务非常有用，如数值积分、微分、内插、外推等。因此，当涉及到数学任务时，它形成了一种基于Python的MATLAB的快速替代。</p></li></ul><h1 id="NumPy的安装"><a href="#NumPy的安装" class="headerlink" title="NumPy的安装"></a>NumPy的安装</h1><p>在你的计算机上安装NumPy的最快也是最简单的方法是在shell上使用以下命令：<code>pip install numpy</code>。</p><p>这将在你的计算机上安装最新&#x2F;最稳定的NumPy版本。通过PIP安装是安装任何Python软件包的最简单方法。现在让我们来谈谈NumPy中最重要的概念，NumPy数组。</p><h1 id="Numpy的使用以及应用"><a href="#Numpy的使用以及应用" class="headerlink" title="Numpy的使用以及应用"></a>Numpy的使用以及应用</h1><ul><li><p>导入Numpy模块</p></li><li><p>使用np.array()创建</p></li><li><p>使用plt 创建</p></li><li><p>使用np的routines函数创建</p></li><li><p>使用array()创建一个一维数组</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><ul><li>使用array()创建一个多维数组</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><ul><li>数组和列表的区别是什么？<ul><li>数组中存储的数据元素类型必须是统一类型</li><li>优先级：<ul><li>字符串 &gt; 浮点型 &gt; 整型</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2.2</span>,<span class="string">&quot;three&quot;</span>])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([&#39;1&#39;, &#39;2.2&#39;, &#39;three&#39;], dtype=&#39;&lt;U32&#39;)</code></pre><ul><li>将外部的一张图片读取加载到numpy数组中，然后尝试改变数组元素的数值查看对原始图片的影响</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img_arr = plt.imread(<span class="string">&quot;C:\\Users\\图片.jpg&quot;</span>) <span class="comment">#返回的数组，数组中装载的就是图片内容</span></span><br><span class="line">plt.imshow(img_arr)<span class="comment">#将numpy数组进行可视化展示</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204a526cd0&gt;</code></pre><p><img src="/img/python-cleaning/output_7_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_arr = img_arr - <span class="number">100</span> <span class="comment">#将每一个数组元素都减去100</span></span><br><span class="line">plt.imshow(img_arr)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204d86c690&gt;</code></pre><p><img src="/img/python-cleaning/output_8_1.png" alt="png"></p><ul><li>zero()</li><li>ones()</li><li>linespace()</li><li>arange()</li><li>random系列</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones(shape=(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1., 1.],       [1., 1., 1., 1.],       [1., 1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">100</span>,num=<span class="number">20</span>)<span class="comment">#一维的等差数列数组</span></span><br></pre></td></tr></table></figure><pre><code>array([  0.        ,   5.26315789,  10.52631579,  15.78947368,        21.05263158,  26.31578947,  31.57894737,  36.84210526,        42.10526316,  47.36842105,  52.63157895,  57.89473684,        63.15789474,  68.42105263,  73.68421053,  78.94736842,        84.21052632,  89.47368421,  94.73684211, 100.        ])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">10</span>,<span class="number">50</span>,step=<span class="number">2</span>)<span class="comment">#一维等差数列</span></span><br></pre></td></tr></table></figure><pre><code>array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,       44, 46, 48])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[93, 62, 92],       [13, 20, 45],       [ 7, 65, 87],       [98, 23, 74],       [69, 18, 37]])</code></pre><h2 id="numpy的常用属性"><a href="#numpy的常用属性" class="headerlink" title="numpy的常用属性"></a>numpy的常用属性</h2><ul><li>shape</li><li>ndim</li><li>size</li><li>dtype</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[78, 21, 12, 74, 84, 52],       [84, 57, 31, 61, 42, 10],       [60, 52, 95, 45, 19, 35],       [18, 31, 23, 21, 66, 21],       [89, 40, 84,  5, 47, 13]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.shape <span class="comment">#返回的是数组的形状</span></span><br></pre></td></tr></table></figure><pre><code>(5, 6)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.ndim <span class="comment">#返回的是数组的维度</span></span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.size <span class="comment">#返回数组元素的个数</span></span><br></pre></td></tr></table></figure><pre><code>30</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.dtype <span class="comment">#返回的是数组元素的类型</span></span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int32&#39;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(arr) <span class="comment">#数组的数据类型</span></span><br></pre></td></tr></table></figure><pre><code>numpy.ndarray</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int32&#39;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个数组，指定数组元素类型为int64</span></span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=<span class="string">&quot;int64&quot;</span>)</span><br><span class="line">arr.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int64&#39;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.dtype = <span class="string">&quot;uint8&quot;</span> <span class="comment">#修改数组的元素类型</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;uint8&#39;)</code></pre><h2 id="numpy的索引和切片操作-重点"><a href="#numpy的索引和切片操作-重点" class="headerlink" title="numpy的索引和切片操作(重点)"></a>numpy的索引和切片操作(重点)</h2><ul><li>索引操作和列表同理</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">1</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25, 61],       [11, 45, 70, 66, 94, 85],       [32, 14, 90, 27, 32, 73],       [34, 32, 47, 74, 81, 69],       [42, 90, 73, 51, 20, 56]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">1</span>] <span class="comment">#取出了numpy数组中的下标为1的行数据</span></span><br></pre></td></tr></table></figure><pre><code>array([11, 45, 70, 66, 94, 85])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]] <span class="comment">#取出多行</span></span><br></pre></td></tr></table></figure><pre><code>array([[11, 45, 70, 66, 94, 85],       [34, 32, 47, 74, 81, 69],       [42, 90, 73, 51, 20, 56]])</code></pre><ul><li>切片操作<ul><li>切出前两行数据</li><li>切出前两列数据</li><li>切出前两行的前两列数据</li><li>数组数据翻转</li><li>练习：将一张图片上下左右进行翻转操作</li><li>练习：将图片进行指定区域的裁剪</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切出arr数组的前两行的数据</span></span><br><span class="line">arr[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#arr[行切片]</span></span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25, 61],       [11, 45, 70, 66, 94, 85]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切出arr数组的前两列数据</span></span><br><span class="line">arr[:,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#arr[行切片,列切片]</span></span><br></pre></td></tr></table></figure><pre><code>array([[94, 45],       [11, 45],       [32, 14],       [34, 32],       [42, 90]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切出前两行的前两列数据</span></span><br><span class="line">arr[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[94, 45],       [11, 45]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将数组的行倒置</span></span><br><span class="line">arr[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[42, 90, 73, 51, 20, 56],       [34, 32, 47, 74, 81, 69],       [32, 14, 90, 27, 32, 73],       [11, 45, 70, 66, 94, 85],       [94, 45,  2, 65, 25, 61]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将数组的列倒置</span></span><br><span class="line">arr[:,::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[61, 25, 65,  2, 45, 94],       [85, 94, 66, 70, 45, 11],       [73, 32, 27, 90, 14, 32],       [69, 81, 74, 47, 32, 34],       [56, 20, 51, 73, 90, 42]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有元素倒置</span></span><br><span class="line">arr[::-<span class="number">1</span>,::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[56, 20, 51, 73, 90, 42],       [69, 81, 74, 47, 32, 34],       [73, 32, 27, 90, 14, 32],       [85, 94, 66, 70, 45, 11],       [61, 25, 65,  2, 45, 94]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图片翻转前置准备</span></span><br><span class="line">img_arr = plt.imread(<span class="string">&quot;C:\\Users\\图片.jpg&quot;</span>)</span><br><span class="line">plt.imshow(img_arr)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204d7a3690&gt;</code></pre><p><img src="/img/python-cleaning/output_36_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_arr.shape</span><br></pre></td></tr></table></figure><pre><code>(1024, 1024, 3)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一张图片左右进行翻转操作</span></span><br><span class="line">plt.imshow(img_arr[:,::-<span class="number">1</span>,:]) <span class="comment">#img_arr[行，列，颜色]</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204f886690&gt;</code></pre><p><img src="/img/python-cleaning/output_38_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一张图片上下进行翻转操作</span></span><br><span class="line">plt.imshow(img_arr[::-<span class="number">1</span>,:,:])</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204f629a90&gt;</code></pre><p><img src="/img/python-cleaning/output_39_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图片裁剪的功能</span></span><br><span class="line">plt.imshow(img_arr[<span class="number">200</span>:<span class="number">1000</span>,<span class="number">250</span>:<span class="number">800</span>,:])</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2204fdc81d0&gt;</code></pre><p><img src="/img/python-cleaning/output_40_1.png" alt="png"></p><h2 id="变形reshape"><a href="#变形reshape" class="headerlink" title="变形reshape"></a>变形reshape</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr <span class="comment">#原始arr是一个5行6列的二维数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25, 61],       [11, 45, 70, 66, 94, 85],       [32, 14, 90, 27, 32, 73],       [34, 32, 47, 74, 81, 69],       [42, 90, 73, 51, 20, 56]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将二维的数组变成1维</span></span><br><span class="line">arr_1 = arr.reshape((<span class="number">30</span>,))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将1维变形成多维</span></span><br><span class="line">arr_1.reshape((<span class="number">6</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25],       [61, 11, 45, 70, 66],       [94, 85, 32, 14, 90],       [27, 32, 73, 34, 32],       [47, 74, 81, 69, 42],       [90, 73, 51, 20, 56]])</code></pre><h2 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h2><ul><li>axis轴向的理解(将多个numpy数组进行横向或者纵向的拼接)<ul><li>0：列</li><li>1：行</li></ul></li><li>问题：<ul><li>级联的两个数组维度一样，但是行列个数不一样会如何?(不行，链接的两个数组维度必须完全匹配)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate((arr,arr),axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25, 61, 94, 45,  2, 65, 25, 61],       [11, 45, 70, 66, 94, 85, 11, 45, 70, 66, 94, 85],       [32, 14, 90, 27, 32, 73, 32, 14, 90, 27, 32, 73],       [34, 32, 47, 74, 81, 69, 34, 32, 47, 74, 81, 69],       [42, 90, 73, 51, 20, 56, 42, 90, 73, 51, 20, 56]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr3 = np.concatenate((img_arr,img_arr,img_arr),axis=<span class="number">0</span>)</span><br><span class="line">plt.imshow(arr3)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.image.AxesImage at 0x2205118d290&gt;</code></pre><p><img src="/img/python-cleaning/output_47_1.png" alt="png"></p><h2 id="常用的聚合操作"><a href="#常用的聚合操作" class="headerlink" title="常用的聚合操作"></a>常用的聚合操作</h2><ul><li>sum,max,min,mean</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr</span><br></pre></td></tr></table></figure><pre><code>array([[94, 45,  2, 65, 25, 61],       [11, 45, 70, 66, 94, 85],       [32, 14, 90, 27, 32, 73],       [34, 32, 47, 74, 81, 69],       [42, 90, 73, 51, 20, 56]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([292, 371, 268, 337, 332])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.<span class="built_in">max</span>(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([94, 94, 90, 81, 90])</code></pre><h2 id="常用的数学函数"><a href="#常用的数学函数" class="headerlink" title="常用的数学函数"></a>常用的数学函数</h2><ul><li>Numpy提供了标准的三角函数：sin() cos() tan()</li><li>numpy.around(a,decimals)函数返回指定数字的四舍五入值<ul><li>参数说明：<ul><li>a：数组</li><li>decimals：舍入的小数位数，默认值为0，如果为负，整数将四舍五入到小数点左侧的位置</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sin(arr)</span><br></pre></td></tr></table></figure><pre><code>array([[-0.24525199,  0.85090352,  0.90929743,  0.82682868, -0.13235175,        -0.96611777],       [-0.99999021,  0.85090352,  0.77389068, -0.02655115, -0.24525199,        -0.17607562],       [ 0.55142668,  0.99060736,  0.89399666,  0.95637593,  0.55142668,        -0.67677196],       [ 0.52908269,  0.55142668,  0.12357312, -0.98514626, -0.62988799,        -0.11478481],       [-0.91652155,  0.89399666, -0.67677196,  0.67022918,  0.91294525,        -0.521551  ]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.around(<span class="number">3.14</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>3.14</code></pre><h2 id="常用的统计函数"><a href="#常用的统计函数" class="headerlink" title="常用的统计函数"></a>常用的统计函数</h2><ul><li>numpy.amin()和numpy.amax(),用于计算数组中的元素沿指定轴的最小、最大值</li><li>numpy.ptp(),计算数组中元素最大值与最小值的差(最大值-最小值)</li><li>numpy.median()函数用于计算数组a中元素的中位数(中值)</li><li>标准差std():标准差是一组数据平均分散程度的一种度量</li><li>方差var():统计中的方差(样本方差)是每个样本值与全体样本值的平均数之差的平方值的平均数，换句话说，标准差是方差的平方根</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ptp(arr,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([83, 76, 88, 47, 74, 29])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">1</span>].std()</span><br></pre></td></tr></table></figure><pre><code>27.455519582691487</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">1</span>].var()</span><br></pre></td></tr></table></figure><pre><code>753.8055555555557</code></pre><h2 id="矩阵相关"><a href="#矩阵相关" class="headerlink" title="矩阵相关"></a>矩阵相关</h2><ul><li>矩阵库numpy.matlib</li><li>numpy.matlib.identity()函数返回给定大小的单位矩阵</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eye返回一个标准的对角矩阵</span></span><br><span class="line">np.eye(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0., 0., 0., 0.],       [0., 1., 0., 0., 0., 0.],       [0., 0., 1., 0., 0., 0.],       [0., 0., 0., 1., 0., 0.],       [0., 0., 0., 0., 1., 0.],       [0., 0., 0., 0., 0., 1.]])</code></pre><ul><li>转置矩阵 .T</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.T</span><br></pre></td></tr></table></figure><pre><code>array([[94, 11, 32, 34, 42],       [45, 45, 14, 32, 90],       [ 2, 70, 90, 47, 73],       [65, 66, 27, 74, 51],       [25, 94, 32, 81, 20],       [61, 85, 73, 69, 56]])</code></pre><h2 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><ul><li>numpy.dot(a,b,out&#x3D;None)<ul><li>a:ndarray数组</li><li>b:ndarray数组</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = np.array([[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">3</span>]])</span><br><span class="line">a2 = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.dot(a1,a2)</span><br></pre></td></tr></table></figure><pre><code>array([[3, 4],       [7, 8]])</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件学习 </category>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> 数据清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记 - 随心记录(九月份再开始把~)</title>
      <link href="/posts/917bede2.html"/>
      <url>/posts/917bede2.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="今日概览"><a href="#今日概览" class="headerlink" title="今日概览"></a>今日概览</h1><ul><li>今天是什么日子： <blockquote><p>  </p></blockquote></li><li>起床时间：<blockquote><p>  </p></blockquote></li><li>就寝时间：<blockquote><p>  </p></blockquote></li><li>天气：<blockquote><p>  </p></blockquote></li><li>心情：<blockquote><p>天天开心啦</p></blockquote></li></ul><h1 id="任务清单"><a href="#任务清单" class="headerlink" title="任务清单"></a>任务清单</h1><ul><li><p>昨日完成的最重要三件事：</p><blockquote><ol><li></li><li></li><li></li></ol></blockquote></li><li><p>今天最重要的三件事：</p><blockquote><ol><li></li><li></li><li></li></ol></blockquote></li></ul><h1 id="学习·信息·阅读"><a href="#学习·信息·阅读" class="headerlink" title="学习·信息·阅读"></a>学习·信息·阅读</h1><ul><li>将你每天的学习到的知识在这里简要进行记录（只记录关键内容和心理感受）<blockquote></blockquote></li></ul><p>  </p><h1 id="健康·饮食·锻炼"><a href="#健康·饮食·锻炼" class="headerlink" title="健康·饮食·锻炼"></a>健康·饮食·锻炼</h1><ul><li>有强健的体魄才能更好的学习和生活。<blockquote></blockquote></li></ul><p>  </p><h1 id="人际·家人·朋友"><a href="#人际·家人·朋友" class="headerlink" title="人际·家人·朋友"></a>人际·家人·朋友</h1><blockquote><p>  </p></blockquote><h1 id="工作·思考"><a href="#工作·思考" class="headerlink" title="工作·思考"></a>工作·思考</h1><blockquote><p>  </p></blockquote><h1 id="创意·未来"><a href="#创意·未来" class="headerlink" title="创意·未来"></a>创意·未来</h1><blockquote><p>  </p></blockquote><hr><h1 id="周复盘-每周日晚完成"><a href="#周复盘-每周日晚完成" class="headerlink" title="周复盘(每周日晚完成)"></a>周复盘(每周日晚完成)</h1><blockquote><p>  </p></blockquote><h1 id="月计划-每月1号完成"><a href="#月计划-每月1号完成" class="headerlink" title="月计划(每月1号完成)"></a>月计划(每月1号完成)</h1><blockquote><p>  </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《煮雪》 - 林清玄</title>
      <link href="/posts/b80166a2.html"/>
      <url>/posts/b80166a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="《煮雪》-林清玄散文"><a href="#《煮雪》-林清玄散文" class="headerlink" title="《煮雪》 - 林清玄散文"></a>《煮雪》 - 林清玄散文</h1><h2 id="大体概括"><a href="#大体概括" class="headerlink" title="大体概括"></a>大体概括</h2><p>  出自作家林清玄的一篇散文《煮雪》。《煮雪》讲了作者想象的一个多情而极度浪漫的传说，传说北极天寒地冻，一开口说话就凝成冰雪，对方听不见，只好回家慢慢烤来听。什么样的话，用什么样的火，什么样的方式，“如果失恋，等不到冰雪尽融的时刻，就放一把火，把雪都烧了，烧成另一个春天”。有的时候，人要学会放下，放下失意与悲痛，重新开始一段崭新的生活。此时此刻，我的心得到了温煮，“心雪”的香早已弥漫整个天空，泛滥到使人微醉。</p><p><a href="https://baike.baidu.com/item/%E7%85%AE%E9%9B%AA/20382942">百度百科</a></p><hr><h2 id="作品原文"><a href="#作品原文" class="headerlink" title="作品原文"></a>作品原文</h2><blockquote><p>  传说在北极的人因为天寒地冻，一开口说话就结成冰雪，对方听不见，只好回家慢慢地烤来听……</p><p>  这是个极度浪漫的传说，想是多情的南方人编出来的。</p><p>  可是，我们假设说话结冰是真有其事，也是颇有困难，试想：回家烤雪煮雪的时候要用什么火呢？因为人的言谈是有情绪的，煮得太慢或太快都不足以表达说话的情绪。</p><p>  如果我生在北极，可能要为煮的问题烦恼半天，与性急的人交谈，回家要用大火煮烤；与性温的人交谈，回家要用文火。倘若与人吵架呢？回家一定要生个烈火，才能声闻当时哔哔剥剥的火暴声。</p><p>  遇到谈情说爱的时候，回家就要仔细酿造当时的气氛，先用情诗情词裁冰，把它切成细细的碎片，加上一点酒来煮，那么，煮出来的话便能使人微醉。倘若情浓，则不可以用炉火，要用烛火再加一杯咖啡，才不会醉得太厉害，还能维持一丝清醒。</p><p>  遇到不喜欢的人不喜欢的话就好办了，把结成的冰随意弃置就可以了。爱听的话则可以煮一半，留一半他日细细品味，住在北极的人真是太幸福了。</p><p>  但是幸福也不长驻，有时天气太冷，火生不起来，是让人着急的，只好拿着冰雪用手慢慢让它溶化，边溶边听。遇到性急的人恐怕要用雪往墙上摔，摔得力小时听不见，摔得用力则声震物瓦，造成噪音。我向往北极说话的浪漫世界，那是个宁静祥和又能自己制造生活的世界，在我们这个到处都是噪音的时代里，有时我会希望大家说出来的话都结成冰雪，回家如何处理是自家的事，谁也管不着。尤其是人多要开些无聊的会议时，可以把那块嘈杂的大雪球扔在自家前的阴沟里，让它永远见不到天日。</p><p>  斯时斯地，煮雪恐怕要变成一种学问，生命经验丰富的人可以根据雪的大小、成色，专门帮人煮雪为生；因为要煮得恰倒好处和说话时恰如其分一样，确实不易。年轻的恋人们则可以去借别人的“情雪”，借别人的雪来浇自己心中的块垒。</p><p>  如果失恋，等不到冰雪尽溶的时候，就放一把火把雪都烧了，烧成另一个春天。</p></blockquote><hr><h3 id="风雪一席茶，煮雪等春来"><a href="#风雪一席茶，煮雪等春来" class="headerlink" title="风雪一席茶，煮雪等春来"></a>风雪一席茶，煮雪等春来</h3><p>  如何度过寒冬暗夜，中国人自有一套时间的哲学。</p><p>  冬日飞雪覆千里，时间也拉得无比漫长。面对冰寒，古人披蓑衣，戴斗笠，踏入茫茫大雪，集雪瓮中，呼朋引伴，围炉煮雪烹茶。他们心怀欢悦，等待雪化，等待希望，等待热茶足够抵御刺骨之寒，也等待时间在柴火噼啪声中流逝。</p><p>  天际中飘飘洒洒的雪花簌簌落地，墙角的红梅幽幽怡香飘入屋中，合着屋里的暖气，烟云弥漫，一把木勺舀起枝头皑雪，放入玲珑剔透的水晶钵中。雪入壶中，在炉间温煮，待沸后浇到碗里，顺时茶香满屋。</p><p>  出汤杯中细品，琥珀玉光，那茶不似茶，那雪不似雪，那仿佛是天地孕育的日月精华、碧玉琼浆。雪融化后的微甜，并未夺走茶的茗香，似为它注入了一道新的韵味，香中带甜，甜中又夹着茶香，浑然一体，相辅相成。</p><p>  白居易被贬江洲，孤身一人，那年冬天初雪，他提笔给故友写了一封信：“晚来天欲雪，能饮一杯无？”温上一壶初雪以下酒，点上烛火以待故友来，昏昏灯火话平生，大笑一夜直到天明。任凭室外寒风带雪，屋里却把雪煮成暖意。</p><p>  雪液清甘涨井泉，自携茶灶就烹煎，雪冰清玉洁，喻示着人的心性高洁，茶浮浮沉沉，清清淡淡，瀹雪茶味，让人沉思。如此的雅致、率真和不染尘埃。</p><p>  冬越发萧瑟，但幸运的是，冬天也是团圆的季节，从冬至开始，人们就等着团圆。等腊八，等小年，一点点等到春节。刘长卿写道：“日暮苍山远，天寒白屋贫。柴门闻犬吠，风雪夜归人”，无数盏人间灯火，都在等那个风雪夜归人。</p><p>  此时的雪宜烤。烤雪有种烟火之气，当大雪在地面上覆了厚厚的一层，家人围着饭桌，桌边烤着火，母亲盛上一碗热腾腾的饺子，只待你归来，桌满人齐，才是冬天最暖和的事情。</p><p>  冬至此，雪会渐渐消，梅花越开越盛。王安石说：“墙角数枝梅，凌寒独自开。遥知不是雪，为有暗香来”。那缕梅香成了冬天最后的喜乐，人们踏雪寻梅香，煮雪等春来。</p><p>  在大雪里设一席茶，围炉煮雪烹茶。把今年所有的不快，都丢进炉火里燃尽；将所有的喜乐，和着腊梅之雪，煮成一壶茶，煮成明年的希望，煮成寒冬暖意，煮成下一个春天。</p><p>  等待着雪化，等待着暗夜露出曙光，枯枝长出新芽，春天如期而至。倘若等不到冰雪尽溶，就如林清玄所说：放一把火把雪都烧了，烧成另一个春天。</p><p>  风雪一席茶，冷热几韶华。</p><p>  或许今日我们已不煮雪，但在冬寒之中，仍可品咂人间温暖，等风雪停息，忍到春来花开。怀揣着希望，坚信这个冬天一定也可以逾越。世间万事，时间定会给我们一个满意的答复。    </p><p>（文源自网络，版权归原作者所有）</p>]]></content>
      
      
      <categories>
          
          <category> 文章推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析：利用jupyter清洗处理csv</title>
      <link href="/posts/10771.html"/>
      <url>/posts/10771.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python数据清洗"><a href="#Python数据清洗" class="headerlink" title="Python数据清洗"></a>Python数据清洗</h1><h2 id="什么是数据清洗"><a href="#什么是数据清洗" class="headerlink" title="什么是数据清洗"></a>什么是数据清洗</h2><pre><code>数据清洗（data cleaning）是从记录集、数据库表或数据库中检测和纠正（或删除）损坏或不准确的记录的过程，是指识别数据的不完整、不正确、不准确或不相关部分，然后替换、修改、或删除脏数据或粗数据。数据清洗可以与数据加工工具交互执行，也可以通过脚本进行批处理。清洗后，一个数据集应该与系统中其他类似的数据集保持一致。 检测到或删除的不一致可能最初是由用户输入错误、传输或存储中的损坏或不同存储中类似实体的不同数据字典定义引起的。 数据清理与数据确认(data validation)的不同之处在于，数据确认几乎总是意味着数据在输入时被系统拒绝，并在输入时执行，而不是执行于批量数据。数据清洗不仅仅更正错误，同样加强来自各个单独信息系统不同数据间的一致性。专门的数据清洗软件能够自动检测数据文件，更正错误数据，并用全企业一致的格式集成数据。</code></pre><p>info: <a href="https://zh.wikipedia.org/zh-cn/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97">Wiki</a></p><h2 id="数据清洗流程"><a href="#数据清洗流程" class="headerlink" title="数据清洗流程"></a>数据清洗流程</h2><h3 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h3><h4 id="导入所需的库"><a href="#导入所需的库" class="headerlink" title="导入所需的库"></a>导入所需的库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h4 id="读入文件"><a href="#读入文件" class="headerlink" title="读入文件"></a>读入文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读入csv格式文件</span></span><br><span class="line">data=pd.read_csv(<span class="string">&quot;cs-training.csv&quot;</span>,index_col=0)</span><br></pre></td></tr></table></figure><h3 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h3><h4 id="了解数据形状"><a href="#了解数据形状" class="headerlink" title="了解数据形状"></a>了解数据形状</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回元组</span></span><br><span class="line">data.shape</span><br></pre></td></tr></table></figure><h4 id="了解数据结构"><a href="#了解数据结构" class="headerlink" title="了解数据结构"></a>了解数据结构</h4><p>通过了解结构可以看出指标的缺失情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以看出样本的整体情况、缺失状况</span></span><br><span class="line">data.info()</span><br></pre></td></tr></table></figure><h4 id="了解数据描述性统计信息"><a href="#了解数据描述性统计信息" class="headerlink" title="了解数据描述性统计信息"></a>了解数据描述性统计信息</h4><p>通过描述性统计可以初步判断是否存在异常值信息，比如下图中“age”年龄这个字段，最小值0岁明显不符合常理，可判断为异常值。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.describe().T</span><br></pre></td></tr></table></figure><h3 id="重复值处理"><a href="#重复值处理" class="headerlink" title="重复值处理"></a>重复值处理</h3><h4 id="检查重复值"><a href="#检查重复值" class="headerlink" title="检查重复值"></a>检查重复值</h4><p>python中可通过duplicated函数查找并显示数据表中的重复值<br>这里需要注意的是：</p><ul><li>当两条记录中所有的数据都相等时duplicated函数才会判断为重复值；</li><li>duplicated支持从前向后(first)，和从后向前(last)两种重复值查找模式，即从第一行数据开始，第二行数据和第一行一样，从前向后就把第二行数据判断为重复值，从后向前就把第一行数据判断为重复值；</li><li>默认是从前向后进行重复值的查找和判断，也就是后面的条目在重复值判断中显示为True；</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.duplicated() <span class="comment">#返回布尔型数据，告诉重复值的位置</span></span><br><span class="line">data.duplicated().<span class="built_in">sum</span>()  <span class="comment">#说明共有多少个重复值</span></span><br><span class="line">data[data.duplicated()]  <span class="comment">#打印重复值</span></span><br><span class="line">data[data.duplicated()].index   <span class="comment">#打印重复值索引</span></span><br></pre></td></tr></table></figure><h4 id="删除重复值"><a href="#删除重复值" class="headerlink" title="删除重复值"></a>删除重复值</h4><p>python中可通过drop_duplicates函数删除数据表中的重复值，判断标准和逻辑与duplicated函数一样</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.drop_duplicates(inplace=True)   <span class="comment">#inplace=True表示直接在源数据上进行操作</span></span><br><span class="line">data.index = range(data.shape[0])    <span class="comment">#动过源数据就要进行索引重建</span></span><br></pre></td></tr></table></figure><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><h4 id="删除缺失值"><a href="#删除缺失值" class="headerlink" title="删除缺失值"></a>删除缺失值</h4><p>python中可以用dropna函数删除缺失值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DataFrame.dropna(self, axis=0, how=&#x27;any&#x27;, thresh=None, subset=None, inplace=False)</span></span><br><span class="line"><span class="comment">#删除数据表中含有空值的行,如果存在任何NA值，则删除该行或列。</span></span><br><span class="line">data.dropna(how=<span class="string">&#x27;any&#x27;</span>)</span><br><span class="line"><span class="comment"># 传入这个参数后将只丢弃全为缺失值的那些行</span></span><br><span class="line">data.dropna(how = <span class="string">&#x27;all&#x27;</span>)    </span><br><span class="line"><span class="comment">#丢弃有缺失值的列（一般不会这么做，这样会删掉一个特征）</span></span><br><span class="line">data.dropna(axis = 1)     </span><br><span class="line"><span class="comment"># 丢弃全为缺失值的那些列</span></span><br><span class="line">data.dropna(axis=1,how=<span class="string">&quot;all&quot;</span>)  </span><br><span class="line"><span class="comment"># 丢弃‘AgMonthlyIncomee’和‘NumberOfDependents’这两列中有缺失值的行  </span></span><br><span class="line">data.dropna(axis=0,subset = [<span class="string">&quot;MonthlyIncome&quot;</span>, <span class="string">&quot;NumberOfDependents&quot;</span>])   </span><br></pre></td></tr></table></figure><h4 id="固定值填充"><a href="#固定值填充" class="headerlink" title="固定值填充"></a>固定值填充</h4><p>选取某个固定值&#x2F;默认值填充缺失值。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.fillna(-9999, inplace=True) <span class="comment"># 填充 -1,-999,-9999</span></span><br></pre></td></tr></table></figure><h4 id="统计变量填充"><a href="#统计变量填充" class="headerlink" title="统计变量填充"></a>统计变量填充</h4><ol><li>均值填补</li></ol><p>对每一列缺失值，填充当列的均值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对数据中每一列的缺失值，填充当列的均值</span></span><br><span class="line">data.fillna(data.mean(),inplace=True) </span><br><span class="line"><span class="comment">#可为数据中某一个指标缺失值都填充该指标均值</span></span><br><span class="line">data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].fillna(data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].mean(),inplace=True)</span><br></pre></td></tr></table></figure><ol start="2"><li>中位数填补</li></ol><p>对每一列的缺失值，填充当列的中位数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对数据中每一列的缺失值，填充当列的中位数</span></span><br><span class="line">data.fillna(data.median(),inplace=True) </span><br><span class="line"><span class="comment">#可为数据中某一个指标缺失值都填充该指标中位数</span></span><br><span class="line">data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].fillna(data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].median(),inplace=True)</span><br></pre></td></tr></table></figure><ol start="3"><li>众数填补</li></ol><p>对每一列的缺失值，填充当列的众数;但可能存在某列缺失值过多，众数为nan的情况，注意要取的是每列删除掉nan值后的众数。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对数据中每一列的缺失值，填充当列的众数</span></span><br><span class="line">data.fillna(data.mode(),inplace=True) </span><br><span class="line"><span class="comment">#可为数据中某一个指标缺失值都填充该指标众数</span></span><br><span class="line">data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].fillna(data[<span class="string">&#x27;MonthlyIncome&#x27;</span>].mode(),inplace=True)</span><br></pre></td></tr></table></figure><h4 id="向前填充-向后填充"><a href="#向前填充-向后填充" class="headerlink" title="向前填充&#x2F;向后填充"></a>向前填充&#x2F;向后填充</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可用axis修改填充的方向，默认为0</span></span><br><span class="line">data.fillna(method=<span class="string">&#x27;ffill&#x27;</span>,inplace=True)   <span class="comment"># pad/ffill用前一个非缺失值去填充该缺失值</span></span><br><span class="line">data.fillna(method=<span class="string">&#x27;bfill&#x27;</span>,inplace=True)  <span class="comment"># backfill/bfill用后一个非缺失值填充该缺失值</span></span><br></pre></td></tr></table></figure><h4 id="模型填充法"><a href="#模型填充法" class="headerlink" title="模型填充法"></a>模型填充法</h4><p>缺失值作为新的label，建立模型得到预测值，然后进行填充。这里选择某个缺失值数量适当的特征采用随机森林进行拟合</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from sklearn import ensemble</span><br><span class="line">from sklearn.preprocessing import LabelEncoder<span class="comment">#标准化标签，标签专用，能够将分类转换为分类数值。</span></span><br><span class="line">def set_missing(<span class="built_in">df</span>,estimate_list,miss_col):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;df要处理的数据帧，estimate_list用来估计缺失值的字段列表,miss_col缺失字段名称;会直接在原来的数据帧上修改&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    col_list=estimate_list</span><br><span class="line">    col_list.append(miss_col)   </span><br><span class="line">    process_df = df.loc[:,col_list]</span><br><span class="line">    class_le= LabelEncoder()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> col_list[:-1]:</span><br><span class="line">        process_df.loc[:,i]=class_le.fit_transform(process_df.loc[:,i].values)</span><br><span class="line">    <span class="comment"># 分成已知该特征和未知该特征两部分</span></span><br><span class="line">    known=process_df[process_df[miss_col].notnull()].values</span><br><span class="line">    known[:, -1]=class_le.fit_transform(known[:, -1])</span><br><span class="line">    unknown = process_df[process_df[miss_col].isnull()].values</span><br><span class="line">    <span class="comment"># X为特征属性值</span></span><br><span class="line">    X = known[:, :-1]</span><br><span class="line">    <span class="comment"># y为结果标签值</span></span><br><span class="line">    y = known[:, -1]</span><br><span class="line">    <span class="comment"># fit到RandomForestRegressor之中</span></span><br><span class="line">    rfr = ensemble.RandomForestRegressor(random_state=1, n_estimators=200,max_depth=4,n_jobs=-1)</span><br><span class="line">    rfr.fit(X,y)</span><br><span class="line">    <span class="comment"># 用得到的模型进行未知特征值预测</span></span><br><span class="line">    predicted = rfr.predict(unknown[:, :-1]).round(0).astype(int)</span><br><span class="line">    predicted=class_le.inverse_transform(predicted)</span><br><span class="line">    <span class="comment"># print(predicted)</span></span><br><span class="line">    <span class="comment"># 用得到的预测结果填补原缺失数据</span></span><br><span class="line">    df.loc[(<span class="built_in">df</span>[miss_col].isnull()), miss_col] = predicted</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">df</span></span><br></pre></td></tr></table></figure><h4 id="不处理"><a href="#不处理" class="headerlink" title="不处理"></a>不处理</h4><p>保持数据原始信息，不对信息进行处理，而是直接将空值作为一种分类传入模型中进行分析。</p><h3 id="异常值处理"><a href="#异常值处理" class="headerlink" title="异常值处理"></a>异常值处理</h3><p>异常值(outlier)为一组测定值中与平均值的偏差超过两倍标准差的测定值，与平均值的偏差超过三倍标准差的测定值，称为高度异常的异常值。在处理数据时，应剔除高度异常的异常值。</p><h4 id="异常值来源"><a href="#异常值来源" class="headerlink" title="异常值来源"></a>异常值来源</h4><ol><li><dl><dt>人为错误</dt><dd>人为输入异常：数据收集，记录或输入过程中导致的错误<br>故意异常值：人为造假<br>数据处理错误：对数据操作或提取错误导致数据集中的异常值</dd></dl></li><li><dl><dt>机器错误</dt><dd>实验误差：实验设计运用要素不统一<br>测量误差：系统、机器故障导致错误的记录</dd></dl></li><li><dl><dt>偏离值</dt><dd>特殊情形下真实数据值极大，远超一般数值水平：例如富豪的收入水平，销售冠军的销售额等</dd></dl></li></ol><h4 id="异常值识别"><a href="#异常值识别" class="headerlink" title="异常值识别"></a>异常值识别</h4><dl><dt>1.简单统计分析</dt><dd>结合经验对属性值进行一个描述性的统计，查看值的不合理性。例如年龄范围一般为0~100等</dd></dl><dl><dt>2.3δ原则<br>当数据服从正态分布：对于正态分布，距离平均值3δ之外的概率0.003 ，因此认定距离平均值大于3δ的样本样本为异常值；具体步骤为：</dt><dd>1.计算需要检验的数据列的平均值和标准差；<br>2.比较数据列的每个值与平均值的偏差是否超过3倍，如果超过3倍，则为异常值；</dd></dl><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用3倍标准差,找出&#x27;DebtRatio&#x27;异常值</span></span><br><span class="line">sta=(data[<span class="string">&#x27;DebtRatio&#x27;</span>]-data[<span class="string">&#x27;DebtRatio&#x27;</span>].mean())/data[<span class="string">&#x27;DebtRatio&#x27;</span>].std()</span><br><span class="line">sta.abs()&gt;3                       <span class="comment">#返回每个跟3比较的结果</span></span><br><span class="line">data[sta.abs()&gt;3]                 <span class="comment">#异常值</span></span><br><span class="line">delindex=data[sta.abs()&gt;3].index  <span class="comment">#异常值索引</span></span><br><span class="line">data.drop(delindex,inplace=True)  <span class="comment">#删除异常值</span></span><br></pre></td></tr></table></figure><ul><li><u>当数据不服从正态分布：</u>可以通过远离平均距离多少倍的标准差进行判定。</li></ul><p>3.箱型图分析</p><dl><dt>计算过程:</dt><dd>1.计算上四分位数（Q3），中位数，下四分位数（Q1）<br>2.计算上四分位数和下四分位数之间的差值，即四分位数差（IQR，interquartile range）Q3-Q1<br>3.绘制箱线图的上下范围，上限为上四分位数，下限为下四分位数。在箱子内部中位数的位置绘制横线。<br>4.大于上四分位数1.5倍四分位数差的值，或者小于下四分位数1.5倍四分位数差的值，划为异常值（outliers）。<br>5.异常值之外，最靠近上边缘和下边缘的两个值处，画横线，作为箱线图的触须。<br>6.极端异常值，即超出四分位数差3倍距离的异常值，用实心点表示；较为温和的异常值，即处于1.5倍-3倍四分位数差之间的异常值，用空心点表示。<br>7.为箱线图添加名称，数轴等</dd></dl><p>python中可用seaborn库的sns.boxplot()函数画箱型图，查看数值变量的取值范围，是否有异常值</p><h4 id="异常值处理-1"><a href="#异常值处理-1" class="headerlink" title="异常值处理"></a>异常值处理</h4><ol><li>删除</li></ol><p>直接将含有异常值的记录删除；</p><ol start="2"><li>视为缺失值</li></ol><p>将异常值视为缺失值，利用缺失值处理的方法进行处理；</p><ol start="3"><li>平均值修正</li></ol><p>可用前后两个观测值的平均值修正该异常值；</p><ol start="4"><li>不处理</li></ol><p>直接在具有异常值的数据集上进行数据挖掘，由业务分析挖掘价值</p>]]></content>
      
      
      <categories>
          
          <category> 软件学习 </category>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
